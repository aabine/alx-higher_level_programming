===========================
How to Use add_integer.py
===========================

This module defines a function ``add_integer(a, b=98)`` that adds two integers and returns the result.

Function Signature
==================

``add_integer(a, b=98)``

Parameters
----------
a : int or float
    The first integer or float to be added.
b : int or float, optional
    The second integer or float to be added. (Default: 98)

Returns
-------
int
    The sum of `a` and `b` after converting both to integers.

Usage Examples
==============

The `add_integer` function can be used with integers, floats, or a combination of both. It returns the sum of the two provided arguments.

1. Addition of Integers:

    >>> add_integer(2, 3)
    5

    >>> add_integer(-2, 5)
    3

2. Addition of Floats:

    >>> add_integer(2.0, 3.0)
    5

    >>> add_integer(-2.5, 3.2)
    1

3. Mixing Integers and Floats:

    >>> add_integer(2, 3.5)
    5

    >>> add_integer(2.9, 3)
    5

Optional Second Argument
========================

The second argument `b` is optional. If not provided, the function will use the default value of 98 as the second operand. For example:

    >>> add_integer(2)
    100

Non-Numbers Handling
====================

`add_integer()` expects that both arguments are either integers or floats. If either argument is a non-integer and non-float, a `TypeError` is raised:

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a `TypeError` message is only printed for the first argument:

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

Handling Infinity and NaN
=========================

The function will raise an `OverflowError` if infinity or `ValueError` if NaN (Not a Number) is provided as an argument:

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
